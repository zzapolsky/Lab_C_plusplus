#include <iostream>
#include <thread>
#include <chrono>

void print_message(int id) {
    std::cout << "Message from thread " << id << std::endl;
}

int main() {
    std::thread t1(print_message, 1); // —оздание потока t1
    std::thread t2(print_message, 2); // —оздание потока t2

    std::cout << "Main thread created two threads" << std::endl;

    t1.join(); // ќжидание завершени€ потока t1
    std::cout << "Thread 1 finished" << std::endl;

    t2.detach(); // ќтсоединение потока t2
    std::cout << "Thread 2 detached" << std::endl;

    std::this_thread::sleep_for(std::chrono::seconds(1)); // ѕауза на 1 секунду
    std::cout << "Main thread finished" << std::endl;

    return 0;
}
/*
¬ этой программе создаютс€ два потока t1 и t2, выполн€ющие функцию print_message.
¬ функции main выводитс€ сообщение о том, что главный поток создал два потока. 
«атем вызываетс€ метод join дл€ потока t1, который блокирует выполнение главного потока, пока поток t1 не завершитс€. 
ѕосле завершени€ потока t1 выводитс€ сообщение о том, что поток t1 завершен.

ƒалее вызываетс€ метод detach дл€ потока t2, который отсоедин€ет поток t2 от главного потока.
ѕосле отсоединени€ потока t2 выводитс€ сообщение о том, что поток t2 отсоединен. 
ќтсоединенный поток продолжает выполн€тьс€, пока не завершитс€, или пока не будет остановлен с помощью других средств.

«атем выполн€етс€ пауза на 1 секунду с помощью функции sleep_for, и выводитс€ сообщение о том, что главный поток завершен.

ћетоды join и detach позвол€ют измен€ть состо€ние потоков и управл€ть их выполнением. 
ћетод join позвол€ет блокировать выполнение текущего потока, пока не завершитс€ выполнение другого потока. 
ћетод detach позвол€ет отсоединить поток от текущего потока, и продолжать выполн€тьс€ независимо от него.
*/